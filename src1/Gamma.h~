/* February 2014 Guillem Rigaill <rigaill@evry.inra.fr> 

   This file is part of the R package opfp

   opfp is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License (LGPL) as published by
   the Free Software Foundation; either version 2.1 of the License, or
   (at your option) any later version.
   
   opfp is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.
   
   You should have received a copy of the GNU Lesser General Public License
   along with opfp; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
#ifndef GAMMAH
#define GAMMAH
#include <iostream>
#include <math.h>
#include <float.h>
#include <stdlib.h>

class GammaF {
 private:
     double a2, a1, a0;
     /* racine du polynome - A*/
     double rac1, rac2;
     /* status of the polynome 0 = roots not computed, 1 = computed*/
     int status;
     int origine;
 public:
     /* constructors and destructors */
     Polynome2()
     : a0(0),a1(0),a2(0),rac1(0.),rac2(0.),status(0),origine(0) {}
     ~Polynome2() {}
     Polynome2(double A2, double A1, double A0, int origine_)
     : a0(A0),a1(A1),a2(A2),rac1(0.),rac2(0.),status(0),origine(origine_) {}
     /* a few operations */
	/* reset */
     inline
     void reset(double A2, double A1, double A0, int origine_);
     /* getter and setter */
     inline
     double geta2();
     inline
     double geta1();
     inline
     double geta0();
     inline
     double getRacine1();
     inline
     double getRacine2();
     inline
     void seta2(double);
     inline
     void seta1(double);
     inline
     void seta0(double);
     inline
     void setRacine1(double);
     inline
     void setRacine2(double);
     inline
     void setStatus(int);
     inline
     int getStatus();
     inline
     int getOrigine();
     /* Delta and others */
     inline
     double eval(double);
     inline
     double delta();
     /* Delta  of the Polynome - double */
     inline
     double delta(double);
     inline
     void roots();
     /* Roots  of the Polynome - double */
     inline
     void roots(double);
     inline
     void add(double, double, double);
     inline
     void minOrMax(double *, double *, int *);
     /* print and others */
     inline
     void show();
};
#endif 
